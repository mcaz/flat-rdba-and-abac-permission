import "./chunk-5WRI5ZAA.js";

// packages/permission/src/types.ts
var RoleEnum = {
  ADMIN: "ADMIN",
  GENERAL: "GENERAL",
  DEVELOPER: "DEVELOPER"
};

// packages/permission/src/utils.ts
function whiteList(def) {
  const defaultGrant = Object.values(RoleEnum).reduce((acc, role) => {
    acc[role] = () => false;
    return acc;
  }, {});
  return {
    ...defaultGrant,
    ...def
  };
}
function definePermissions(def) {
  return {
    read: whiteList((def == null ? void 0 : def.read) ?? {}),
    create: whiteList((def == null ? void 0 : def.create) ?? {}),
    update: whiteList((def == null ? void 0 : def.update) ?? {}),
    delete: whiteList((def == null ? void 0 : def.delete) ?? {})
  };
}
function handlePermissionError(error) {
  console.error(`Permission Error: ${error.code} - ${error.message}`, error.details);
  return false;
}
function verifyPermission({
  grants: grants2,
  role,
  action,
  resource,
  context
}) {
  var _a, _b;
  if (!role || !action || !resource) {
    return handlePermissionError({
      code: "INVALID_PERMISSION",
      message: `Role or action or resource is not defined for role: ${role}, action: ${action}, resource: ${resource}`
    });
  }
  const permission = (_a = grants2[resource]) == null ? void 0 : _a[action];
  const actionName = String(action);
  const resourceName = String(resource);
  if (!permission) {
    return handlePermissionError({
      code: "INVALID_PERMISSION",
      message: `Permission not defined for action: ${actionName}, resource: ${resourceName}`
    });
  }
  try {
    const hasPermission = (_b = permission[role]) == null ? void 0 : _b.call(permission, context);
    if (typeof hasPermission !== "boolean") {
      return handlePermissionError({
        code: "INVALID_PERMISSION",
        message: `Invalid permission result for action: ${actionName}, resource: ${resourceName}`
      });
    }
    return hasPermission;
  } catch (error) {
    return handlePermissionError({
      code: "SYSTEM_ERROR",
      message: `Permission check failed for action: ${actionName}, resource: ${resourceName}`,
      details: error
    });
  }
}

// packages/permission/src/grants.ts
var grants = {
  "resource:article": definePermissions({
    read: {
      ADMIN: () => true,
      GENERAL: () => true,
      DEVELOPER: () => true
    },
    create: void 0,
    update: void 0,
    delete: void 0
  }),
  "resource:user": definePermissions({
    create: {
      ADMIN: () => false,
      DEVELOPER: () => false,
      GENERAL: () => false
    }
  }),
  "page:users/[id]": definePermissions({
    read: {
      ADMIN: (ctx) => ctx.dynamicParam.userId === "455cb998-2cb3-41cd-8c9e-41416db7d4eb",
      GENERAL: (ctx) => {
        var _a, _b;
        return ((_a = ctx.urlParams) == null ? void 0 : _a.id) === ((_b = ctx.urlParams) == null ? void 0 : _b.id);
      },
      DEVELOPER: () => true
    }
  }),
  "page:articles/[id]": definePermissions({
    read: {
      ADMIN: ({ dynamicParam: allowLink }) => allowLink,
      GENERAL: ({ dynamicParam: allowLink }) => allowLink,
      DEVELOPER: ({ dynamicParam: allowLink }) => allowLink
    }
  }),
  "component:organisms/Header": definePermissions({
    read: {
      ADMIN: () => true
    }
  }),
  "component:organisms/Sidebar": definePermissions(),
  "component:challenges/page#organisms/ChallengeCardTabs": definePermissions({
    read: {
      ADMIN: () => true,
      GENERAL: () => true,
      DEVELOPER: () => true
    },
    update: {
      ADMIN: () => true
    }
  })
};
export {
  RoleEnum,
  definePermissions,
  grants,
  handlePermissionError,
  verifyPermission
};
//# sourceMappingURL=@rdba-abac-auth_permission.js.map
